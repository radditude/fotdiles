#!/usr/bin/env bash

action=$1
shift
query=${@:1}

NOTES_DIR=${NOTES_DIR:-"$HOME/Dropbox/notes"}
NOTES_EDITOR="code"

source $DOTFILES/functions/log

usage() {
  echo ""
  success "Search and manage text files for notes"
  info "USAGE:"
  info "  $(basename $0) <action> <query>"
  info "  Actions:"
  info "    $(basename $0) list"
  info "      - list all notes"
  info "    $(basename $0) daily"
  info "      - make new note file for the current day"
  info "    $(basename $0) find <query>"
  info "      - find a notes file and open it"
  info "    $(basename $0) archive <query|old>"
  info "      - move file from main notes directory to archive"
  info "    $(basename $0) grep <query>"
  info "      - search all notes files for the given word or phrase"
  info "    $(basename $0) new <name>"
  info "      - create and open a new notes file"
  echo ""
  exit
}

today="$(date +%F)"
tomorrow="$(date -v +1d +%F)"

archiveold() {
  dailies=($NOTES_DIR/*-*-*.txt)

  for f in "${dailies[@]}"; do
    filename=$(basename "$f")

    if [[ ! "$filename" == "$today" ]]; then
      mv "$NOTES_DIR/$filename" "$NOTES_DIR/archive/$filename"
      info "$filename archived"
    fi
  done

  success "all expired daily notes archived"
}

archive() {
  if [[ "$query" == "old" ]]; then
    archiveold
    exit
  fi

  cd $NOTES_DIR

  filename=$(fzf +i -q "$query")
  mv $filename archive/$filename
  success "$filename archived"
}

today() {
  makenew $today
}

tomorrow() {
  makenew $tomorrow
}

open() {
  cd $NOTES_DIR
  $NOTES_EDITOR notes.code-workspace
}

find() {
  cd $NOTES_DIR

  if [[ "$query" == "today" ]]; then
    query="$today"
  elif [[ "$query" == "yesterday" ]]; then
    query="$(date -v -1d +%F)"
  fi

  $NOTES_EDITOR $(fzf +i --preview='head -20 {+}' --preview-window=right:wrap -q "$query")
}

list() {
  info "finding notes files"
  echo ""
  ls $NOTES_DIR
  echo ""
  success "all notes files listed"
}

grep() {
  rg -il "$query" $NOTES_DIR | fzf +i --preview='head -20 {+}' --preview-window=right:wrap --bind "enter:execute($NOTES_EDITOR {})" --bind "q:accept"
}

new() {
  if [[ -z "$query" ]]; then
    fail "Please specify a name for the new note!"
    exit
  else
    makenew $query
  fi
}

makenew() {
  cd $NOTES_DIR
  filename="$1.txt"
  touch $filename
  success "$filename created!"
  $NOTES_EDITOR $filename
}

[[ -z "$action" ]] || [[ "$action" == "usage" ]] && usage

if [[ ! -d "$NOTES_DIR" ]]; then
  fail "Notes directory not set!"
  exit
fi

echo ""
$action $query
