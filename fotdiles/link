#!/usr/bin/env bash

source $DOTFILES/functions/log

link_file () {
  local source_dotfile=$1
  local destination=$2

  # reset local flags each time the function runs
  # while $overwrite_all, $backup_all, and $skip_all remain global
  local overwrite= backup= skip=
  local action=

  # if $destination is a file, directory, or symlink
  if [ -f "$destination" ] || [ -d "$destination" ] || [ -L "$destination" ]
  then

    # and we don't have global overwrite, global backup, or global skip enabled already
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      # if $destination is a symlink, get what the symlink points to
      local current_source_dotfile="$(readlink $destination)"

      # if $destination is already a symlink pointing to $source_dotfile, skip it
      if [ "$current_source_dotfile" == "$source_dotfile" ]
      then

        skip=true;

      # if it's a real file/directory, decide whether to skip it, overwrite it, or back it up
      else
        
        user_prompt "File already exists: $destination ($(basename "$source_dotfile")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 -p $'     \033[00;34m-->\033[0m ' action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    # set local flags to equal global flags, if enabled
    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$destination"
      info "removed $destination"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$destination" "${destination}.backup"
      info "moved $destination to ${destination}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      info "skipped $source_dotfile"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$source_dotfile" "$destination"
    info "linked $source_dotfile to $destination"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  # find everything in dotfiles directory with a `.symlink` extension
  # and link it up in $HOME
  for source_dotfile in $(find -H "$DOTFILES" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    destination="$HOME/.$(basename "${source_dotfile%.*}")"
    link_file "$source_dotfile" "$destination"
  done
}

echo ""
install_dotfiles
success "all dotfiles installed!"
